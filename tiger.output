Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: lvalue
    3    | NIL
    4    | INT
    5    | STRING
    6    | MINUS exp
    7    | func_call
    8    | arith_exp
    9    | cmp_exp
   10    | bool_exp
   11    | record_create
   12    | array_create
   13    | lvalue ASSIGN exp
   14    | IF exp THEN exp ELSE exp
   15    | IF exp THEN exp
   16    | WHILE exp DO exp
   17    | FOR ID ASSIGN exp TO exp DO exp
   18    | BREAK
   19    | LET decs IN expseq END
   20    | LPAREN expseq RPAREN

   21 lvalue: ID
   22       | ID LBRACK exp RBRACK
   23       | lvalue LBRACK exp RBRACK
   24       | lvalue DOT ID

   25 func_call: ID LPAREN explist RPAREN

   26 explist: %empty
   27        | explist_nonempty

   28 explist_nonempty: exp
   29                 | explist_nonempty COMMA exp

   30 arith_exp: exp PLUS exp
   31          | exp MINUS exp
   32          | exp TIMES exp
   33          | exp DIVIDE exp

   34 cmp_exp: exp EQ exp
   35        | exp NEQ exp
   36        | exp LT exp
   37        | exp LE exp
   38        | exp GT exp
   39        | exp GE exp

   40 bool_exp: exp AND exp
   41         | exp OR exp

   42 record_create: ID LBRACE record_create_list RBRACE

   43 record_create_list: %empty
   44                   | record_create_list_nonempty

   45 record_create_list_nonempty: record_create_field
   46                            | record_create_list_nonempty COMMA record_create_field

   47 record_create_field: ID EQ exp

   48 array_create: ID LBRACK exp RBRACK OF exp

   49 decs: %empty
   50     | decs dec

   51 dec: tydeclist
   52    | vardec
   53    | fundeclist

   54 tydeclist: tydec
   55          | tydec tydeclist

   56 tydec: TYPE ID EQ ty

   57 ty: ID
   58   | LBRACE tyfields RBRACE
   59   | ARRAY OF ID

   60 tyfields: %empty
   61         | tyfields_nonempty

   62 tyfields_nonempty: tyfield
   63                  | tyfields_nonempty COMMA tyfield

   64 tyfield: ID COLON ID

   65 vardec: VAR ID ASSIGN exp
   66       | VAR ID COLON ID ASSIGN exp

   67 fundeclist: fundec
   68           | fundec fundeclist

   69 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   70       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   71 expseq: %empty
   72       | exp
   73       | expseq SEMICOLON exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    LOW (258)
    UMINUS (259)
    ID <sval> (260) 17 21 22 24 25 42 47 48 56 57 59 64 65 66 69 70
    STRING <sval> (261) 5
    INT <ival> (262) 4
    COMMA (263) 29 46 63
    COLON (264) 64 66 70
    SEMICOLON (265) 73
    LPAREN (266) 20 25 69 70
    RPAREN (267) 20 25 69 70
    LBRACK (268) 22 23 48
    RBRACK (269) 22 23 48
    LBRACE (270) 42 58
    RBRACE (271) 42 58
    DOT (272) 24
    PLUS (273) 30
    MINUS (274) 6 31
    TIMES (275) 32
    DIVIDE (276) 33
    EQ (277) 34 47 56 69 70
    NEQ (278) 35
    LT (279) 36
    LE (280) 37
    GT (281) 38
    GE (282) 39
    AND (283) 40
    OR (284) 41
    ASSIGN (285) 13 17 65 66
    ARRAY (286) 59
    IF (287) 14 15
    THEN (288) 14 15
    ELSE (289) 14
    WHILE (290) 16
    FOR (291) 17
    TO (292) 17
    DO (293) 16 17
    LET (294) 19
    IN (295) 19
    END (296) 19
    OF (297) 48 59
    BREAK (298) 18
    NIL (299) 3
    FUNCTION (300) 69 70
    VAR (301) 65 66
    TYPE (302) 56


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program <exp> (49)
        on left: 1
        on right: 0
    exp <exp> (50)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
        on right: 1 6 13 14 15 16 17 22 23 28 29 30 31 32 33 34 35 36 37 38 39 40 41 47 48 65 66 69 70 72 73
    lvalue <var> (51)
        on left: 21 22 23 24
        on right: 2 13 23 24
    func_call <exp> (52)
        on left: 25
        on right: 7
    explist <explist> (53)
        on left: 26 27
        on right: 25
    explist_nonempty <explist> (54)
        on left: 28 29
        on right: 27 29
    arith_exp <exp> (55)
        on left: 30 31 32 33
        on right: 8
    cmp_exp <exp> (56)
        on left: 34 35 36 37 38 39
        on right: 9
    bool_exp <exp> (57)
        on left: 40 41
        on right: 10
    record_create <exp> (58)
        on left: 42
        on right: 11
    record_create_list <efieldlist> (59)
        on left: 43 44
        on right: 42
    record_create_list_nonempty <efieldlist> (60)
        on left: 45 46
        on right: 44 46
    record_create_field <efield> (61)
        on left: 47
        on right: 45 46
    array_create <exp> (62)
        on left: 48
        on right: 12
    decs <declist> (63)
        on left: 49 50
        on right: 19 50
    dec <dec> (64)
        on left: 51 52 53
        on right: 50
    tydeclist <dec> (65)
        on left: 54 55
        on right: 51 55
    tydec <namety> (66)
        on left: 56
        on right: 54 55
    ty <ty> (67)
        on left: 57 58 59
        on right: 56
    tyfields <fieldlist> (68)
        on left: 60 61
        on right: 58 69 70
    tyfields_nonempty <fieldlist> (69)
        on left: 62 63
        on right: 61 63
    tyfield <field> (70)
        on left: 64
        on right: 62 63
    vardec <dec> (71)
        on left: 65 66
        on right: 52
    fundeclist <dec> (72)
        on left: 67 68
        on right: 53 68
    fundec <fundec> (73)
        on left: 69 70
        on right: 67 68
    expseq <explist> (74)
        on left: 71 72 73
        on right: 19 20 73


State 0

    0 $accept: • program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program        go to state 12
    exp            go to state 13
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 1

   21 lvalue: ID •
   22       | ID • LBRACK exp RBRACK
   25 func_call: ID • LPAREN explist RPAREN
   42 record_create: ID • LBRACE record_create_list RBRACE
   48 array_create: ID • LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 21
    LBRACK  shift, and go to state 22
    LBRACE  shift, and go to state 23

    $default  reduce using rule 21 (lvalue)


State 2

    5 exp: STRING •

    $default  reduce using rule 5 (exp)


State 3

    4 exp: INT •

    $default  reduce using rule 4 (exp)


State 4

   20 exp: LPAREN • expseq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 71 (expseq)

    exp            go to state 24
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20
    expseq         go to state 25


State 5

    6 exp: MINUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 26
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 6

   14 exp: IF • exp THEN exp ELSE exp
   15    | IF • exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 27
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 7

   16 exp: WHILE • exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 28
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 8

   17 exp: FOR • ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 29


State 9

   19 exp: LET • decs IN expseq END

    $default  reduce using rule 49 (decs)

    decs  go to state 30


State 10

   18 exp: BREAK •

    $default  reduce using rule 18 (exp)


State 11

    3 exp: NIL •

    $default  reduce using rule 3 (exp)


State 12

    0 $accept: program • $end

    $end  shift, and go to state 31


State 13

    1 program: exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 1 (program)


State 14

    2 exp: lvalue •
   13    | lvalue • ASSIGN exp
   23 lvalue: lvalue • LBRACK exp RBRACK
   24       | lvalue • DOT ID

    LBRACK  shift, and go to state 44
    DOT     shift, and go to state 45
    ASSIGN  shift, and go to state 46

    $default  reduce using rule 2 (exp)


State 15

    7 exp: func_call •

    $default  reduce using rule 7 (exp)


State 16

    8 exp: arith_exp •

    $default  reduce using rule 8 (exp)


State 17

    9 exp: cmp_exp •

    $default  reduce using rule 9 (exp)


State 18

   10 exp: bool_exp •

    $default  reduce using rule 10 (exp)


State 19

   11 exp: record_create •

    $default  reduce using rule 11 (exp)


State 20

   12 exp: array_create •

    $default  reduce using rule 12 (exp)


State 21

   25 func_call: ID LPAREN • explist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 26 (explist)

    exp               go to state 47
    lvalue            go to state 14
    func_call         go to state 15
    explist           go to state 48
    explist_nonempty  go to state 49
    arith_exp         go to state 16
    cmp_exp           go to state 17
    bool_exp          go to state 18
    record_create     go to state 19
    array_create      go to state 20


State 22

   22 lvalue: ID LBRACK • exp RBRACK
   48 array_create: ID LBRACK • exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 50
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 23

   42 record_create: ID LBRACE • record_create_list RBRACE

    ID  shift, and go to state 51

    $default  reduce using rule 43 (record_create_list)

    record_create_list           go to state 52
    record_create_list_nonempty  go to state 53
    record_create_field          go to state 54


State 24

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   72 expseq: exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 72 (expseq)


State 25

   20 exp: LPAREN expseq • RPAREN
   73 expseq: expseq • SEMICOLON exp

    SEMICOLON  shift, and go to state 55
    RPAREN     shift, and go to state 56


State 26

    6 exp: MINUS exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    $default  reduce using rule 6 (exp)


State 27

   14 exp: IF exp • THEN exp ELSE exp
   15    | IF exp • THEN exp
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43
    THEN    shift, and go to state 57


State 28

   16 exp: WHILE exp • DO exp
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43
    DO      shift, and go to state 58


State 29

   17 exp: FOR ID • ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 59


State 30

   19 exp: LET decs • IN expseq END
   50 decs: decs • dec

    IN        shift, and go to state 60
    FUNCTION  shift, and go to state 61
    VAR       shift, and go to state 62
    TYPE      shift, and go to state 63

    dec         go to state 64
    tydeclist   go to state 65
    tydec       go to state 66
    vardec      go to state 67
    fundeclist  go to state 68
    fundec      go to state 69


State 31

    0 $accept: program $end •

    $default  accept


State 32

   30 arith_exp: exp PLUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 70
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 33

   31 arith_exp: exp MINUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 71
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 34

   32 arith_exp: exp TIMES • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 72
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 35

   33 arith_exp: exp DIVIDE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 73
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 36

   34 cmp_exp: exp EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 74
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 37

   35 cmp_exp: exp NEQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 75
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 38

   36 cmp_exp: exp LT • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 76
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 39

   37 cmp_exp: exp LE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 77
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 40

   38 cmp_exp: exp GT • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 78
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 41

   39 cmp_exp: exp GE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 79
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 42

   40 bool_exp: exp AND • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 80
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 43

   41 bool_exp: exp OR • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 81
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 44

   23 lvalue: lvalue LBRACK • exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 82
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 45

   24 lvalue: lvalue DOT • ID

    ID  shift, and go to state 83


State 46

   13 exp: lvalue ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 84
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 47

   28 explist_nonempty: exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 28 (explist_nonempty)


State 48

   25 func_call: ID LPAREN explist • RPAREN

    RPAREN  shift, and go to state 85


State 49

   27 explist: explist_nonempty •
   29 explist_nonempty: explist_nonempty • COMMA exp

    COMMA  shift, and go to state 86

    $default  reduce using rule 27 (explist)


State 50

   22 lvalue: ID LBRACK exp • RBRACK
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   48 array_create: ID LBRACK exp • RBRACK OF exp

    RBRACK  shift, and go to state 87
    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43


State 51

   47 record_create_field: ID • EQ exp

    EQ  shift, and go to state 88


State 52

   42 record_create: ID LBRACE record_create_list • RBRACE

    RBRACE  shift, and go to state 89


State 53

   44 record_create_list: record_create_list_nonempty •
   46 record_create_list_nonempty: record_create_list_nonempty • COMMA record_create_field

    COMMA  shift, and go to state 90

    $default  reduce using rule 44 (record_create_list)


State 54

   45 record_create_list_nonempty: record_create_field •

    $default  reduce using rule 45 (record_create_list_nonempty)


State 55

   73 expseq: expseq SEMICOLON • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 91
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 56

   20 exp: LPAREN expseq RPAREN •

    $default  reduce using rule 20 (exp)


State 57

   14 exp: IF exp THEN • exp ELSE exp
   15    | IF exp THEN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 92
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 58

   16 exp: WHILE exp DO • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 93
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 59

   17 exp: FOR ID ASSIGN • exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 94
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 60

   19 exp: LET decs IN • expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 71 (expseq)

    exp            go to state 24
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20
    expseq         go to state 95


State 61

   69 fundec: FUNCTION • ID LPAREN tyfields RPAREN EQ exp
   70       | FUNCTION • ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 96


State 62

   65 vardec: VAR • ID ASSIGN exp
   66       | VAR • ID COLON ID ASSIGN exp

    ID  shift, and go to state 97


State 63

   56 tydec: TYPE • ID EQ ty

    ID  shift, and go to state 98


State 64

   50 decs: decs dec •

    $default  reduce using rule 50 (decs)


State 65

   51 dec: tydeclist •

    $default  reduce using rule 51 (dec)


State 66

   54 tydeclist: tydec •
   55          | tydec • tydeclist

    TYPE  shift, and go to state 63

    $default  reduce using rule 54 (tydeclist)

    tydeclist  go to state 99
    tydec      go to state 66


State 67

   52 dec: vardec •

    $default  reduce using rule 52 (dec)


State 68

   53 dec: fundeclist •

    $default  reduce using rule 53 (dec)


State 69

   67 fundeclist: fundec •
   68           | fundec • fundeclist

    FUNCTION  shift, and go to state 61

    $default  reduce using rule 67 (fundeclist)

    fundeclist  go to state 100
    fundec      go to state 69


State 70

   30 arith_exp: exp • PLUS exp
   30          | exp PLUS exp •
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    $default  reduce using rule 30 (arith_exp)


State 71

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   31          | exp MINUS exp •
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    $default  reduce using rule 31 (arith_exp)


State 72

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   32          | exp TIMES exp •
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    $default  reduce using rule 32 (arith_exp)


State 73

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   33          | exp DIVIDE exp •
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    $default  reduce using rule 33 (arith_exp)


State 74

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   34        | exp EQ exp •
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 34 (cmp_exp)


State 75

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   35        | exp NEQ exp •
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 35 (cmp_exp)


State 76

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   36        | exp LT exp •
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 36 (cmp_exp)


State 77

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   37        | exp LE exp •
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 37 (cmp_exp)


State 78

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   38        | exp GT exp •
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 38 (cmp_exp)


State 79

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   39        | exp GE exp •
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 39 (cmp_exp)


State 80

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   40         | exp AND exp •
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41

    $default  reduce using rule 40 (bool_exp)


State 81

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   41         | exp OR exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42

    $default  reduce using rule 41 (bool_exp)


State 82

   23 lvalue: lvalue LBRACK exp • RBRACK
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    RBRACK  shift, and go to state 101
    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43


State 83

   24 lvalue: lvalue DOT ID •

    $default  reduce using rule 24 (lvalue)


State 84

   13 exp: lvalue ASSIGN exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 13 (exp)


State 85

   25 func_call: ID LPAREN explist RPAREN •

    $default  reduce using rule 25 (func_call)


State 86

   29 explist_nonempty: explist_nonempty COMMA • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 102
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 87

   22 lvalue: ID LBRACK exp RBRACK •
   48 array_create: ID LBRACK exp RBRACK • OF exp

    OF  shift, and go to state 103

    $default  reduce using rule 22 (lvalue)


State 88

   47 record_create_field: ID EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 104
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 89

   42 record_create: ID LBRACE record_create_list RBRACE •

    $default  reduce using rule 42 (record_create)


State 90

   46 record_create_list_nonempty: record_create_list_nonempty COMMA • record_create_field

    ID  shift, and go to state 51

    record_create_field  go to state 105


State 91

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   73 expseq: expseq SEMICOLON exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 73 (expseq)


State 92

   14 exp: IF exp THEN exp • ELSE exp
   15    | IF exp THEN exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43
    ELSE    shift, and go to state 106

    $default  reduce using rule 15 (exp)


State 93

   16 exp: WHILE exp DO exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 16 (exp)


State 94

   17 exp: FOR ID ASSIGN exp • TO exp DO exp
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43
    TO      shift, and go to state 107


State 95

   19 exp: LET decs IN expseq • END
   73 expseq: expseq • SEMICOLON exp

    SEMICOLON  shift, and go to state 55
    END        shift, and go to state 108


State 96

   69 fundec: FUNCTION ID • LPAREN tyfields RPAREN EQ exp
   70       | FUNCTION ID • LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 109


State 97

   65 vardec: VAR ID • ASSIGN exp
   66       | VAR ID • COLON ID ASSIGN exp

    COLON   shift, and go to state 110
    ASSIGN  shift, and go to state 111


State 98

   56 tydec: TYPE ID • EQ ty

    EQ  shift, and go to state 112


State 99

   55 tydeclist: tydec tydeclist •

    $default  reduce using rule 55 (tydeclist)


State 100

   68 fundeclist: fundec fundeclist •

    $default  reduce using rule 68 (fundeclist)


State 101

   23 lvalue: lvalue LBRACK exp RBRACK •

    $default  reduce using rule 23 (lvalue)


State 102

   29 explist_nonempty: explist_nonempty COMMA exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 29 (explist_nonempty)


State 103

   48 array_create: ID LBRACK exp RBRACK OF • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 113
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 104

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   47 record_create_field: ID EQ exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 47 (record_create_field)


State 105

   46 record_create_list_nonempty: record_create_list_nonempty COMMA record_create_field •

    $default  reduce using rule 46 (record_create_list_nonempty)


State 106

   14 exp: IF exp THEN exp ELSE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 114
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 107

   17 exp: FOR ID ASSIGN exp TO • exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 115
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 108

   19 exp: LET decs IN expseq END •

    $default  reduce using rule 19 (exp)


State 109

   69 fundec: FUNCTION ID LPAREN • tyfields RPAREN EQ exp
   70       | FUNCTION ID LPAREN • tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 116

    $default  reduce using rule 60 (tyfields)

    tyfields           go to state 117
    tyfields_nonempty  go to state 118
    tyfield            go to state 119


State 110

   66 vardec: VAR ID COLON • ID ASSIGN exp

    ID  shift, and go to state 120


State 111

   65 vardec: VAR ID ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 121
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 112

   56 tydec: TYPE ID EQ • ty

    ID      shift, and go to state 122
    LBRACE  shift, and go to state 123
    ARRAY   shift, and go to state 124

    ty  go to state 125


State 113

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   48 array_create: ID LBRACK exp RBRACK OF exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 48 (array_create)


State 114

   14 exp: IF exp THEN exp ELSE exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 14 (exp)


State 115

   17 exp: FOR ID ASSIGN exp TO exp • DO exp
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43
    DO      shift, and go to state 126


State 116

   64 tyfield: ID • COLON ID

    COLON  shift, and go to state 127


State 117

   69 fundec: FUNCTION ID LPAREN tyfields • RPAREN EQ exp
   70       | FUNCTION ID LPAREN tyfields • RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 128


State 118

   61 tyfields: tyfields_nonempty •
   63 tyfields_nonempty: tyfields_nonempty • COMMA tyfield

    COMMA  shift, and go to state 129

    $default  reduce using rule 61 (tyfields)


State 119

   62 tyfields_nonempty: tyfield •

    $default  reduce using rule 62 (tyfields_nonempty)


State 120

   66 vardec: VAR ID COLON ID • ASSIGN exp

    ASSIGN  shift, and go to state 130


State 121

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   65 vardec: VAR ID ASSIGN exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 65 (vardec)


State 122

   57 ty: ID •

    $default  reduce using rule 57 (ty)


State 123

   58 ty: LBRACE • tyfields RBRACE

    ID  shift, and go to state 116

    $default  reduce using rule 60 (tyfields)

    tyfields           go to state 131
    tyfields_nonempty  go to state 118
    tyfield            go to state 119


State 124

   59 ty: ARRAY • OF ID

    OF  shift, and go to state 132


State 125

   56 tydec: TYPE ID EQ ty •

    $default  reduce using rule 56 (tydec)


State 126

   17 exp: FOR ID ASSIGN exp TO exp DO • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 133
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 127

   64 tyfield: ID COLON • ID

    ID  shift, and go to state 134


State 128

   69 fundec: FUNCTION ID LPAREN tyfields RPAREN • EQ exp
   70       | FUNCTION ID LPAREN tyfields RPAREN • COLON ID EQ exp

    COLON  shift, and go to state 135
    EQ     shift, and go to state 136


State 129

   63 tyfields_nonempty: tyfields_nonempty COMMA • tyfield

    ID  shift, and go to state 116

    tyfield  go to state 137


State 130

   66 vardec: VAR ID COLON ID ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 138
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 131

   58 ty: LBRACE tyfields • RBRACE

    RBRACE  shift, and go to state 139


State 132

   59 ty: ARRAY OF • ID

    ID  shift, and go to state 140


State 133

   17 exp: FOR ID ASSIGN exp TO exp DO exp •
   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 17 (exp)


State 134

   64 tyfield: ID COLON ID •

    $default  reduce using rule 64 (tyfield)


State 135

   70 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON • ID EQ exp

    ID  shift, and go to state 141


State 136

   69 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 142
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 137

   63 tyfields_nonempty: tyfields_nonempty COMMA tyfield •

    $default  reduce using rule 63 (tyfields_nonempty)


State 138

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   66 vardec: VAR ID COLON ID ASSIGN exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 66 (vardec)


State 139

   58 ty: LBRACE tyfields RBRACE •

    $default  reduce using rule 58 (ty)


State 140

   59 ty: ARRAY OF ID •

    $default  reduce using rule 59 (ty)


State 141

   70 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID • EQ exp

    EQ  shift, and go to state 143


State 142

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   69 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 69 (fundec)


State 143

   70 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 144
    lvalue         go to state 14
    func_call      go to state 15
    arith_exp      go to state 16
    cmp_exp        go to state 17
    bool_exp       go to state 18
    record_create  go to state 19
    array_create   go to state 20


State 144

   30 arith_exp: exp • PLUS exp
   31          | exp • MINUS exp
   32          | exp • TIMES exp
   33          | exp • DIVIDE exp
   34 cmp_exp: exp • EQ exp
   35        | exp • NEQ exp
   36        | exp • LT exp
   37        | exp • LE exp
   38        | exp • GT exp
   39        | exp • GE exp
   40 bool_exp: exp • AND exp
   41         | exp • OR exp
   70 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp •

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    LE      shift, and go to state 39
    GT      shift, and go to state 40
    GE      shift, and go to state 41
    AND     shift, and go to state 42
    OR      shift, and go to state 43

    $default  reduce using rule 70 (fundec)
