Grammar

    0 $accept: program $end

    1 program: exp
    2        | %empty

    3 exp: lvalue
    4    | NIL
    5    | INT
    6    | TRUE
    7    | FALSE
    8    | STRING
    9    | MINUS exp
   10    | func_call
   11    | arith_exp
   12    | cmp_exp
   13    | bool_exp
   14    | record_create
   15    | array_create
   16    | lvalue ASSIGN exp
   17    | IF exp THEN exp ELSE exp
   18    | IF exp THEN exp
   19    | WHILE exp DO exp
   20    | FOR ID ASSIGN exp TO exp DO exp
   21    | BREAK
   22    | LET decs IN expseq END
   23    | LPAREN expseq RPAREN

   24 lvalue: ID
   25       | ID LBRACK exp RBRACK
   26       | lvalue LBRACK exp RBRACK
   27       | lvalue DOT ID

   28 func_call: ID LPAREN explist RPAREN

   29 explist: %empty
   30        | explist_nonempty

   31 explist_nonempty: exp
   32                 | exp COMMA explist_nonempty

   33 arith_exp: exp PLUS exp
   34          | exp MINUS exp
   35          | exp TIMES exp
   36          | exp DIVIDE exp

   37 cmp_exp: exp EQ exp
   38        | exp NEQ exp
   39        | exp LT exp
   40        | exp LE exp
   41        | exp GT exp
   42        | exp GE exp

   43 bool_exp: exp AND exp
   44         | exp OR exp

   45 record_create: ID LBRACE record_create_list RBRACE

   46 record_create_list: %empty
   47                   | record_create_list_nonempty

   48 record_create_list_nonempty: record_create_field
   49                            | record_create_field COMMA record_create_list_nonempty

   50 record_create_field: ID EQ exp

   51 array_create: ID LBRACK exp RBRACK OF exp

   52 decs: %empty
   53     | dec decs

   54 dec: tydeclist
   55    | vardec
   56    | fundeclist

   57 tydeclist: tydec
   58          | tydec tydeclist

   59 tydec: TYPE ID EQ ty

   60 ty: ID
   61   | LBRACE tyfields RBRACE
   62   | ARRAY OF ID

   63 tyfields: %empty
   64         | tyfields_nonempty

   65 tyfields_nonempty: tyfield
   66                  | tyfield COMMA tyfields_nonempty

   67 tyfield: ID COLON ID

   68 vardec: VAR ID ASSIGN exp
   69       | VAR ID COLON ID ASSIGN exp

   70 fundeclist: fundec
   71           | fundec fundeclist

   72 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   73       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   74 expseq: %empty
   75       | exp
   76       | exp SEMICOLON expseq


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    LOW (258)
    UMINUS (259)
    ID <sval> (260) 20 24 25 27 28 45 50 51 59 60 62 67 68 69 72 73
    STRING <sval> (261) 8
    INT <ival> (262) 5
    COMMA (263) 32 49 66
    COLON (264) 67 69 73
    SEMICOLON (265) 76
    LPAREN (266) 23 28 72 73
    RPAREN (267) 23 28 72 73
    LBRACK (268) 25 26 51
    RBRACK (269) 25 26 51
    LBRACE (270) 45 61
    RBRACE (271) 45 61
    DOT (272) 27
    PLUS (273) 33
    MINUS (274) 9 34
    TIMES (275) 35
    DIVIDE (276) 36
    EQ (277) 37 50 59 72 73
    NEQ (278) 38
    LT (279) 39
    LE (280) 40
    GT (281) 41
    GE (282) 42
    AND (283) 43
    OR (284) 44
    ASSIGN (285) 16 20 68 69
    ARRAY (286) 62
    IF (287) 17 18
    THEN (288) 17 18
    ELSE (289) 17
    WHILE (290) 19
    FOR (291) 20
    TO (292) 20
    DO (293) 19 20
    LET (294) 22
    IN (295) 22
    END (296) 22
    OF (297) 51 62
    BREAK (298) 21
    NIL (299) 4
    FUNCTION (300) 72 73
    VAR (301) 68 69
    TYPE (302) 59
    TRUE (303) 6
    FALSE (304) 7


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program <exp> (51)
        on left: 1 2
        on right: 0
    exp <exp> (52)
        on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
        on right: 1 9 16 17 18 19 20 25 26 31 32 33 34 35 36 37 38 39 40 41 42 43 44 50 51 68 69 72 73 75 76
    lvalue <var> (53)
        on left: 24 25 26 27
        on right: 3 16 26 27
    func_call <exp> (54)
        on left: 28
        on right: 10
    explist <explist> (55)
        on left: 29 30
        on right: 28
    explist_nonempty <explist> (56)
        on left: 31 32
        on right: 30 32
    arith_exp <exp> (57)
        on left: 33 34 35 36
        on right: 11
    cmp_exp <exp> (58)
        on left: 37 38 39 40 41 42
        on right: 12
    bool_exp <exp> (59)
        on left: 43 44
        on right: 13
    record_create <exp> (60)
        on left: 45
        on right: 14
    record_create_list <efieldlist> (61)
        on left: 46 47
        on right: 45
    record_create_list_nonempty <efieldlist> (62)
        on left: 48 49
        on right: 47 49
    record_create_field <efield> (63)
        on left: 50
        on right: 48 49
    array_create <exp> (64)
        on left: 51
        on right: 15
    decs <declist> (65)
        on left: 52 53
        on right: 22 53
    dec <dec> (66)
        on left: 54 55 56
        on right: 53
    tydeclist <dec> (67)
        on left: 57 58
        on right: 54 58
    tydec <namety> (68)
        on left: 59
        on right: 57 58
    ty <ty> (69)
        on left: 60 61 62
        on right: 59
    tyfields <fieldlist> (70)
        on left: 63 64
        on right: 61 72 73
    tyfields_nonempty <fieldlist> (71)
        on left: 65 66
        on right: 64 66
    tyfield <field> (72)
        on left: 67
        on right: 65 66
    vardec <dec> (73)
        on left: 68 69
        on right: 55
    fundeclist <dec> (74)
        on left: 70 71
        on right: 56 71
    fundec <fundec> (75)
        on left: 72 73
        on right: 70 71
    expseq <explist> (76)
        on left: 74 75 76
        on right: 22 23 76


State 0

    0 $accept: • program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    $default  reduce using rule 2 (program)

    program        go to state 14
    exp            go to state 15
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 1

   24 lvalue: ID •
   25       | ID • LBRACK exp RBRACK
   28 func_call: ID • LPAREN explist RPAREN
   45 record_create: ID • LBRACE record_create_list RBRACE
   51 array_create: ID • LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 23
    LBRACK  shift, and go to state 24
    LBRACE  shift, and go to state 25

    $default  reduce using rule 24 (lvalue)


State 2

    8 exp: STRING •

    $default  reduce using rule 8 (exp)


State 3

    5 exp: INT •

    $default  reduce using rule 5 (exp)


State 4

   23 exp: LPAREN • expseq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    $default  reduce using rule 74 (expseq)

    exp            go to state 26
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22
    expseq         go to state 27


State 5

    9 exp: MINUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 28
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 6

   17 exp: IF • exp THEN exp ELSE exp
   18    | IF • exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 29
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 7

   19 exp: WHILE • exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 30
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 8

   20 exp: FOR • ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 31


State 9

   22 exp: LET • decs IN expseq END

    FUNCTION  shift, and go to state 32
    VAR       shift, and go to state 33
    TYPE      shift, and go to state 34

    $default  reduce using rule 52 (decs)

    decs        go to state 35
    dec         go to state 36
    tydeclist   go to state 37
    tydec       go to state 38
    vardec      go to state 39
    fundeclist  go to state 40
    fundec      go to state 41


State 10

   21 exp: BREAK •

    $default  reduce using rule 21 (exp)


State 11

    4 exp: NIL •

    $default  reduce using rule 4 (exp)


State 12

    6 exp: TRUE •

    $default  reduce using rule 6 (exp)


State 13

    7 exp: FALSE •

    $default  reduce using rule 7 (exp)


State 14

    0 $accept: program • $end

    $end  shift, and go to state 42


State 15

    1 program: exp •
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 1 (program)


State 16

    3 exp: lvalue •
   16    | lvalue • ASSIGN exp
   26 lvalue: lvalue • LBRACK exp RBRACK
   27       | lvalue • DOT ID

    LBRACK  shift, and go to state 55
    DOT     shift, and go to state 56
    ASSIGN  shift, and go to state 57

    $default  reduce using rule 3 (exp)


State 17

   10 exp: func_call •

    $default  reduce using rule 10 (exp)


State 18

   11 exp: arith_exp •

    $default  reduce using rule 11 (exp)


State 19

   12 exp: cmp_exp •

    $default  reduce using rule 12 (exp)


State 20

   13 exp: bool_exp •

    $default  reduce using rule 13 (exp)


State 21

   14 exp: record_create •

    $default  reduce using rule 14 (exp)


State 22

   15 exp: array_create •

    $default  reduce using rule 15 (exp)


State 23

   28 func_call: ID LPAREN • explist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    $default  reduce using rule 29 (explist)

    exp               go to state 58
    lvalue            go to state 16
    func_call         go to state 17
    explist           go to state 59
    explist_nonempty  go to state 60
    arith_exp         go to state 18
    cmp_exp           go to state 19
    bool_exp          go to state 20
    record_create     go to state 21
    array_create      go to state 22


State 24

   25 lvalue: ID LBRACK • exp RBRACK
   51 array_create: ID LBRACK • exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 61
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 25

   45 record_create: ID LBRACE • record_create_list RBRACE

    ID  shift, and go to state 62

    $default  reduce using rule 46 (record_create_list)

    record_create_list           go to state 63
    record_create_list_nonempty  go to state 64
    record_create_field          go to state 65


State 26

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   75 expseq: exp •
   76       | exp • SEMICOLON expseq

    SEMICOLON  shift, and go to state 66
    PLUS       shift, and go to state 43
    MINUS      shift, and go to state 44
    TIMES      shift, and go to state 45
    DIVIDE     shift, and go to state 46
    EQ         shift, and go to state 47
    NEQ        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    AND        shift, and go to state 53
    OR         shift, and go to state 54

    $default  reduce using rule 75 (expseq)


State 27

   23 exp: LPAREN expseq • RPAREN

    RPAREN  shift, and go to state 67


State 28

    9 exp: MINUS exp •
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    $default  reduce using rule 9 (exp)


State 29

   17 exp: IF exp • THEN exp ELSE exp
   18    | IF exp • THEN exp
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    THEN    shift, and go to state 68


State 30

   19 exp: WHILE exp • DO exp
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    DO      shift, and go to state 69


State 31

   20 exp: FOR ID • ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 70


State 32

   72 fundec: FUNCTION • ID LPAREN tyfields RPAREN EQ exp
   73       | FUNCTION • ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 71


State 33

   68 vardec: VAR • ID ASSIGN exp
   69       | VAR • ID COLON ID ASSIGN exp

    ID  shift, and go to state 72


State 34

   59 tydec: TYPE • ID EQ ty

    ID  shift, and go to state 73


State 35

   22 exp: LET decs • IN expseq END

    IN  shift, and go to state 74


State 36

   53 decs: dec • decs

    FUNCTION  shift, and go to state 32
    VAR       shift, and go to state 33
    TYPE      shift, and go to state 34

    $default  reduce using rule 52 (decs)

    decs        go to state 75
    dec         go to state 36
    tydeclist   go to state 37
    tydec       go to state 38
    vardec      go to state 39
    fundeclist  go to state 40
    fundec      go to state 41


State 37

   54 dec: tydeclist •

    $default  reduce using rule 54 (dec)


State 38

   57 tydeclist: tydec •
   58          | tydec • tydeclist

    TYPE  shift, and go to state 34

    $default  reduce using rule 57 (tydeclist)

    tydeclist  go to state 76
    tydec      go to state 38


State 39

   55 dec: vardec •

    $default  reduce using rule 55 (dec)


State 40

   56 dec: fundeclist •

    $default  reduce using rule 56 (dec)


State 41

   70 fundeclist: fundec •
   71           | fundec • fundeclist

    FUNCTION  shift, and go to state 32

    $default  reduce using rule 70 (fundeclist)

    fundeclist  go to state 77
    fundec      go to state 41


State 42

    0 $accept: program $end •

    $default  accept


State 43

   33 arith_exp: exp PLUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 78
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 44

   34 arith_exp: exp MINUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 79
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 45

   35 arith_exp: exp TIMES • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 80
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 46

   36 arith_exp: exp DIVIDE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 81
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 47

   37 cmp_exp: exp EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 82
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 48

   38 cmp_exp: exp NEQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 83
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 49

   39 cmp_exp: exp LT • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 84
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 50

   40 cmp_exp: exp LE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 85
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 51

   41 cmp_exp: exp GT • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 86
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 52

   42 cmp_exp: exp GE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 87
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 53

   43 bool_exp: exp AND • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 88
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 54

   44 bool_exp: exp OR • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 89
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 55

   26 lvalue: lvalue LBRACK • exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 90
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 56

   27 lvalue: lvalue DOT • ID

    ID  shift, and go to state 91


State 57

   16 exp: lvalue ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 92
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 58

   31 explist_nonempty: exp •
   32                 | exp • COMMA explist_nonempty
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    COMMA   shift, and go to state 93
    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 31 (explist_nonempty)


State 59

   28 func_call: ID LPAREN explist • RPAREN

    RPAREN  shift, and go to state 94


State 60

   30 explist: explist_nonempty •

    $default  reduce using rule 30 (explist)


State 61

   25 lvalue: ID LBRACK exp • RBRACK
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   51 array_create: ID LBRACK exp • RBRACK OF exp

    RBRACK  shift, and go to state 95
    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54


State 62

   50 record_create_field: ID • EQ exp

    EQ  shift, and go to state 96


State 63

   45 record_create: ID LBRACE record_create_list • RBRACE

    RBRACE  shift, and go to state 97


State 64

   47 record_create_list: record_create_list_nonempty •

    $default  reduce using rule 47 (record_create_list)


State 65

   48 record_create_list_nonempty: record_create_field •
   49                            | record_create_field • COMMA record_create_list_nonempty

    COMMA  shift, and go to state 98

    $default  reduce using rule 48 (record_create_list_nonempty)


State 66

   76 expseq: exp SEMICOLON • expseq

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    $default  reduce using rule 74 (expseq)

    exp            go to state 26
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22
    expseq         go to state 99


State 67

   23 exp: LPAREN expseq RPAREN •

    $default  reduce using rule 23 (exp)


State 68

   17 exp: IF exp THEN • exp ELSE exp
   18    | IF exp THEN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 100
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 69

   19 exp: WHILE exp DO • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 101
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 70

   20 exp: FOR ID ASSIGN • exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 102
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 71

   72 fundec: FUNCTION ID • LPAREN tyfields RPAREN EQ exp
   73       | FUNCTION ID • LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 103


State 72

   68 vardec: VAR ID • ASSIGN exp
   69       | VAR ID • COLON ID ASSIGN exp

    COLON   shift, and go to state 104
    ASSIGN  shift, and go to state 105


State 73

   59 tydec: TYPE ID • EQ ty

    EQ  shift, and go to state 106


State 74

   22 exp: LET decs IN • expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    $default  reduce using rule 74 (expseq)

    exp            go to state 26
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22
    expseq         go to state 107


State 75

   53 decs: dec decs •

    $default  reduce using rule 53 (decs)


State 76

   58 tydeclist: tydec tydeclist •

    $default  reduce using rule 58 (tydeclist)


State 77

   71 fundeclist: fundec fundeclist •

    $default  reduce using rule 71 (fundeclist)


State 78

   33 arith_exp: exp • PLUS exp
   33          | exp PLUS exp •
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    $default  reduce using rule 33 (arith_exp)


State 79

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   34          | exp MINUS exp •
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    $default  reduce using rule 34 (arith_exp)


State 80

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   35          | exp TIMES exp •
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    $default  reduce using rule 35 (arith_exp)


State 81

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   36          | exp DIVIDE exp •
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    $default  reduce using rule 36 (arith_exp)


State 82

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   37        | exp EQ exp •
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 37 (cmp_exp)


State 83

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   38        | exp NEQ exp •
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 38 (cmp_exp)


State 84

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   39        | exp LT exp •
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 39 (cmp_exp)


State 85

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   40        | exp LE exp •
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 40 (cmp_exp)


State 86

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   41        | exp GT exp •
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 41 (cmp_exp)


State 87

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   42        | exp GE exp •
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 42 (cmp_exp)


State 88

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   43         | exp AND exp •
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52

    $default  reduce using rule 43 (bool_exp)


State 89

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   44         | exp OR exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53

    $default  reduce using rule 44 (bool_exp)


State 90

   26 lvalue: lvalue LBRACK exp • RBRACK
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    RBRACK  shift, and go to state 108
    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54


State 91

   27 lvalue: lvalue DOT ID •

    $default  reduce using rule 27 (lvalue)


State 92

   16 exp: lvalue ASSIGN exp •
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 16 (exp)


State 93

   32 explist_nonempty: exp COMMA • explist_nonempty

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp               go to state 58
    lvalue            go to state 16
    func_call         go to state 17
    explist_nonempty  go to state 109
    arith_exp         go to state 18
    cmp_exp           go to state 19
    bool_exp          go to state 20
    record_create     go to state 21
    array_create      go to state 22


State 94

   28 func_call: ID LPAREN explist RPAREN •

    $default  reduce using rule 28 (func_call)


State 95

   25 lvalue: ID LBRACK exp RBRACK •
   51 array_create: ID LBRACK exp RBRACK • OF exp

    OF  shift, and go to state 110

    $default  reduce using rule 25 (lvalue)


State 96

   50 record_create_field: ID EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 111
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 97

   45 record_create: ID LBRACE record_create_list RBRACE •

    $default  reduce using rule 45 (record_create)


State 98

   49 record_create_list_nonempty: record_create_field COMMA • record_create_list_nonempty

    ID  shift, and go to state 62

    record_create_list_nonempty  go to state 112
    record_create_field          go to state 65


State 99

   76 expseq: exp SEMICOLON expseq •

    $default  reduce using rule 76 (expseq)


State 100

   17 exp: IF exp THEN exp • ELSE exp
   18    | IF exp THEN exp •
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    ELSE    shift, and go to state 113

    $default  reduce using rule 18 (exp)


State 101

   19 exp: WHILE exp DO exp •
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 19 (exp)


State 102

   20 exp: FOR ID ASSIGN exp • TO exp DO exp
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    TO      shift, and go to state 114


State 103

   72 fundec: FUNCTION ID LPAREN • tyfields RPAREN EQ exp
   73       | FUNCTION ID LPAREN • tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 115

    $default  reduce using rule 63 (tyfields)

    tyfields           go to state 116
    tyfields_nonempty  go to state 117
    tyfield            go to state 118


State 104

   69 vardec: VAR ID COLON • ID ASSIGN exp

    ID  shift, and go to state 119


State 105

   68 vardec: VAR ID ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 120
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 106

   59 tydec: TYPE ID EQ • ty

    ID      shift, and go to state 121
    LBRACE  shift, and go to state 122
    ARRAY   shift, and go to state 123

    ty  go to state 124


State 107

   22 exp: LET decs IN expseq • END

    END  shift, and go to state 125


State 108

   26 lvalue: lvalue LBRACK exp RBRACK •

    $default  reduce using rule 26 (lvalue)


State 109

   32 explist_nonempty: exp COMMA explist_nonempty •

    $default  reduce using rule 32 (explist_nonempty)


State 110

   51 array_create: ID LBRACK exp RBRACK OF • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 126
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 111

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   50 record_create_field: ID EQ exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 50 (record_create_field)


State 112

   49 record_create_list_nonempty: record_create_field COMMA record_create_list_nonempty •

    $default  reduce using rule 49 (record_create_list_nonempty)


State 113

   17 exp: IF exp THEN exp ELSE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 127
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 114

   20 exp: FOR ID ASSIGN exp TO • exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 128
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 115

   67 tyfield: ID • COLON ID

    COLON  shift, and go to state 129


State 116

   72 fundec: FUNCTION ID LPAREN tyfields • RPAREN EQ exp
   73       | FUNCTION ID LPAREN tyfields • RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 130


State 117

   64 tyfields: tyfields_nonempty •

    $default  reduce using rule 64 (tyfields)


State 118

   65 tyfields_nonempty: tyfield •
   66                  | tyfield • COMMA tyfields_nonempty

    COMMA  shift, and go to state 131

    $default  reduce using rule 65 (tyfields_nonempty)


State 119

   69 vardec: VAR ID COLON ID • ASSIGN exp

    ASSIGN  shift, and go to state 132


State 120

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   68 vardec: VAR ID ASSIGN exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 68 (vardec)


State 121

   60 ty: ID •

    $default  reduce using rule 60 (ty)


State 122

   61 ty: LBRACE • tyfields RBRACE

    ID  shift, and go to state 115

    $default  reduce using rule 63 (tyfields)

    tyfields           go to state 133
    tyfields_nonempty  go to state 117
    tyfield            go to state 118


State 123

   62 ty: ARRAY • OF ID

    OF  shift, and go to state 134


State 124

   59 tydec: TYPE ID EQ ty •

    $default  reduce using rule 59 (tydec)


State 125

   22 exp: LET decs IN expseq END •

    $default  reduce using rule 22 (exp)


State 126

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   51 array_create: ID LBRACK exp RBRACK OF exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 51 (array_create)


State 127

   17 exp: IF exp THEN exp ELSE exp •
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 17 (exp)


State 128

   20 exp: FOR ID ASSIGN exp TO exp • DO exp
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    DO      shift, and go to state 135


State 129

   67 tyfield: ID COLON • ID

    ID  shift, and go to state 136


State 130

   72 fundec: FUNCTION ID LPAREN tyfields RPAREN • EQ exp
   73       | FUNCTION ID LPAREN tyfields RPAREN • COLON ID EQ exp

    COLON  shift, and go to state 137
    EQ     shift, and go to state 138


State 131

   66 tyfields_nonempty: tyfield COMMA • tyfields_nonempty

    ID  shift, and go to state 115

    tyfields_nonempty  go to state 139
    tyfield            go to state 118


State 132

   69 vardec: VAR ID COLON ID ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 140
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 133

   61 ty: LBRACE tyfields • RBRACE

    RBRACE  shift, and go to state 141


State 134

   62 ty: ARRAY OF • ID

    ID  shift, and go to state 142


State 135

   20 exp: FOR ID ASSIGN exp TO exp DO • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 143
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 136

   67 tyfield: ID COLON ID •

    $default  reduce using rule 67 (tyfield)


State 137

   73 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON • ID EQ exp

    ID  shift, and go to state 144


State 138

   72 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 145
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 139

   66 tyfields_nonempty: tyfield COMMA tyfields_nonempty •

    $default  reduce using rule 66 (tyfields_nonempty)


State 140

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   69 vardec: VAR ID COLON ID ASSIGN exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 69 (vardec)


State 141

   61 ty: LBRACE tyfields RBRACE •

    $default  reduce using rule 61 (ty)


State 142

   62 ty: ARRAY OF ID •

    $default  reduce using rule 62 (ty)


State 143

   20 exp: FOR ID ASSIGN exp TO exp DO exp •
   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 20 (exp)


State 144

   73 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID • EQ exp

    EQ  shift, and go to state 146


State 145

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   72 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 72 (fundec)


State 146

   73 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11
    TRUE    shift, and go to state 12
    FALSE   shift, and go to state 13

    exp            go to state 147
    lvalue         go to state 16
    func_call      go to state 17
    arith_exp      go to state 18
    cmp_exp        go to state 19
    bool_exp       go to state 20
    record_create  go to state 21
    array_create   go to state 22


State 147

   33 arith_exp: exp • PLUS exp
   34          | exp • MINUS exp
   35          | exp • TIMES exp
   36          | exp • DIVIDE exp
   37 cmp_exp: exp • EQ exp
   38        | exp • NEQ exp
   39        | exp • LT exp
   40        | exp • LE exp
   41        | exp • GT exp
   42        | exp • GE exp
   43 bool_exp: exp • AND exp
   44         | exp • OR exp
   73 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 73 (fundec)
